#include<iostream>
#include<ctype.h>
#include<string.h>
#include<math.h>
using namespace std;
class stack
{
	struct node
	{
	   float   data;
	   node *next;
	};
	node *top;
public:
       stack()
       {
	 top=NULL;
       }
       int empty();
       void push(float);
       float pop();
       int Top();
};

int stack::empty()
{
 if(top==NULL)
	return 1;
else
 return 0;
}

void stack::push(float  x)
{  	node *newnode;
  newnode=new node;
  newnode->data=x;
  newnode->next=top;
  top=newnode;
}

float stack::pop()
{
   node *temp=top;
    float  x;
    top=top->next;
    x=temp->data;
 delete temp;
 return x;
}

int stack::Top()
{	return top->data;	}

int Priority(char Op)
{
if(Op=='(' || Op==')')
	return 0;
if(Op=='+' || Op=='-')
	return 1;
else if(Op=='*' || Op=='/')
	return 2;
else if(Op=='^')
	return 3;
else
	return 4;
}

float Operation(char Op,float A,float B)
{
float P;
if(Op=='*')
	P=A*B;
else if(Op=='/')
	P=A/B;
else if(Op=='+')
	P=A+B;
else if(Op=='-')
	  P=A-B;
else if (Op=='^')
        P=pow(A,B);

return P;
}



void infixtoprefix(char infix[20])
{
  char prefix[20],x,token;
 int i,j=0;
 stack S;
for(i=strlen(infix)-1;i>=0;i--)
{
  token=infix[i];
if(isalnum(token))
  prefix[j++]=token;
else
  if(token == ')')
  S.push(token);
else
  if(token == '(')
 while((x=S.pop())!=')')
prefix[j++]=x;
else
{
	while(!S.empty() && Priority(token)<Priority(S.Top()))
    {
   prefix[j++]=S.pop();
    }
    S.push(token);
 }
}

while(!S.empty())
   prefix[j++]=S.pop();
prefix[j]='\0';
cout<<"\nPrefix Expression=>";
for(i=strlen(prefix)-1;i>=0;i--)
  cout<<prefix[i];
}

float Prefix_Evaluation(char Str[20])
{
    int i;
    float Op1,Op2,Result,val;
    stack  S;
    char token;
     for(i=strlen(Str)-1;i>=0;i--)
    {
      token=Str[i];
      if(isalpha(token))// if char
      {	cout<<"\nEnter the value of "<<token<<"=>";
	cin>>val;
	S.push(val);
      }
      else if(isdigit(token))
	   S.push(token-48);
      else
      {
	Op1=S.pop();
	Op2=S.pop();
	Result=Operation(token,Op1,Op2);
	cout<<"Result: ";
	S.push(Result);
      }
}
return S.pop();
}

int main()
{
    int ch;
    char infix[20],prefix[20];
 do
  {
   cout<<"\n\nSELECT THE CHOICE FROM BELOW\n1:Infix to Prefix\n2:Prefix Evaluation";
   cout<<"\nEnter your Choice: ";
   cin>>ch;
   switch(ch)
   {
    
    case 1:
          cout<<"\nEnter infix Expression=>";
          cin>>infix;
		  infixtoprefix(infix);
		  break;

   
    case 2:
          cout<<"\nEnter Prefix Expression=>";
          cin>>prefix;
		  cout<<"\nEvaluated Result=> " <<Prefix_Evaluation(prefix);
		  break;
}
}while(ch!=3);
}

